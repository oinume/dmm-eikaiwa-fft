name: CI/CD
on:
  - push
jobs:
  backend-build:
    name: backend-build
    runs-on: ubuntu-20.04
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_ROOT_PASSWORD: root
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
      redis:
        image: redis:3.2-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    env:
      CACHE_VERSION: 1
      ENABLE_TRACE: "false"
      GO111MODULE: "on"
      MYSQL_ALLOW_EMPTY_PASSWORD: true
      MYSQL_USER: "lekcije"
      MYSQL_PASSWORD: "lekcije"
      MYSQL_HOST: "127.0.0.1"
      MYSQL_PORT: "3306"
      MYSQL_DATABASE: "lekcije_test"
      MYSQL_DATABASE_TEST: "lekcije_test"
      REDIS_URL: "redis://h:@127.0.0.1:6379"
      E2E_WEB_DRIVER: "PhantomJS"
      VERSION_HASH: "_version_"
      NODE_ENV: "test"
      LEKCIJE_ENV: "test"
    steps:
      - name: Print PWD
        run: |
          pwd
      - name: Set up Go 1.15
        id: go
        uses: actions/setup-go@v1
        with:
          go-version: 1.15
      - name: Redis cli
        run: |
          sudo apt install redis-tools
          redis-cli ping
      - uses: actions/checkout@v2
      - uses: actions/cache@v2
        id: cache
        with:
          path: ~/go
          key: ${{ runner.os }}-${{ hashFiles('**/go.sum') }}-${{ env.CACHE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-go-
      - name: Install tools
        run: |
          ls -l ~/go/bin || true
          if [ ! -e ~/go/bin/goose ]; then
            make install-tools
          fi
      - name: Build
        run: |
          make build
      - name: Run go-lint
        run: |
          export PATH=${PATH}:~/go/bin
          make go-lint
      - name: Create database
        run: |
          mysql -h${MYSQL_HOST} -uroot -proot < ./db/docker-entrypoint-initdb.d/create_database.sql
      - name: Apply database migrations
        run: |
          export PATH=${PATH}:~/go/bin
          make test/db/goose/up
      - name: Run go-test
        run: |
          export
          make go-test GO_TEST="go test -v -race -coverprofile=coverage.txt -covermode=atomic -p=1"
      - name: Upload coverage to codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: ./coverage.txt
          fail_ci_if_error: false
      #          flags: unittests # optional
      #          name: codecov-umbrella # optional

  frontend-build:
    name: frontend-build
    runs-on: ubuntu-20.04
    env:
      CACHE_VERSION: 1
      VERSION_HASH: "_version_"
    steps:
      - uses: actions/checkout@v2
      - name: Use NodeJS ${{ matrix.node-version }}
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
      - uses: actions/cache@v2
        id: cache
        with:
          path: ~/work/lekcije/lekcije/node_modules
          key: ${{ runner.os }}-${{ hashFiles('**/package.json') }}-${{ env.CACHE_VERSION }}
          restore-keys: |
            ${{ runner.os }}-node_modules-
      - name: Create static dir
        run: |
          mkdir -p static
      - name: Install modules
        run: |
          if [ ! -e "./node_modules" ]; then
            set -eu
            npm install
          fi
      - name: Run tests
        run: |
          npm test
