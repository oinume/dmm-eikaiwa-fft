version: 2

env: &env
  environment:
    GOOGLE_CLOUD_SDK_VERSION: 221.0.0
    GOOGLE_CLOUD_SDK_DOWNLOAD_PATH: /google-cloud-sdk

gitconfig: &gitconfig
  name: "Set .gitconfig"
  command: |
    echo "" > ~/.gitconfig
    git config --global url."https://github.com".insteadOf git://github.com
    git config --global http.https://gopkg.in.followRedirects true

jobs:
  frontend:
    working_directory: /go/src/github.com/oinume/lekcije
    docker:
      - image: node:10.12-stretch
    steps:
      - checkout
      - run:
          <<: *gitconfig
      - run:
          name: "Install packages"
          command: |
            set -eu
            npm install
      - run:
          name: "Run tests"
          command: |
            npm test

  server:
    working_directory: /go/src/github.com/oinume/lekcije
    environment:
      CACHE_VERSION: "v1"
    docker:
      - image: golang:1.11-stretch
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD: true
          MYSQL_USER: "root"
          MYSQL_PASSWORD: "lekcije"
          MYSQL_HOST: "127.0.0.1"
          MYSQL_PORT: "3306"
          MYSQL_DATABASE: "lekcije_test"
          REDIS_URL: "redis://h:@127.0.0.1:6379"
          E2E_WEB_DRIVER: "PhantomJS"
          VERSION_HASH: "_version_"
          NODE_ENV: "test"
          LEKCIJE_ENV: "test"
      - image: circleci/mysql:5.7
        environment:
          MYSQL_ALLOW_EMPTY_PASSWORD=true
      - image: redis:3.2-alpine
    steps:
      - checkout
      - run:
          <<: *gitconfig
      - run:
          name: "Install packages"
          command: |
            set -eu
            apt-get update -qq
            apt-get install -y mysql-client net-tools
      - run:
          name: "Wait MySQL is up"
          command: |
            set -u
            timeout 10 bash -c "while ! mysqladmin ping -u ${MYSQL_USER} -h ${MYSQL_HOST} --silent; do sleep 0.5; done"
      - run:
          name: "Setup database"
          command: |
            set -eu
            mysql -u${MYSQL_USER} -h ${MYSQL_HOST} -e "CREATE DATABASE IF NOT EXISTS lekcije_test DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_unicode_ci"
            mysql -u${MYSQL_USER} -h ${MYSQL_HOST} -e "GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, LOCK TABLES ON \`lekcije\\_test%\`.* TO 'lekcije'@'%' IDENTIFIED BY 'lekcije'"
      # TODO: Skip this task
      - run:
          name: "Install dep"
          command: |
            go get github.com/golang/dep/cmd/dep
      - restore_cache:
          key: go-vendor-{{ .Environment.CACHE_VERSION }}-{{ checksum "Gopkg.lock" }}
      - run:
          name: "Install dependencies"
          command: |
            if [ ! -e "/go/src/github.com/oinume/lekcije/vendor" ]; then
              make install-dep
            fi
      - save_cache:
          key: go-vendor-{{ .Environment.CACHE_VERSION }}-{{ checksum "Gopkg.lock" }}
          paths:
            - "/go/src/github.com/oinume/lekcije/vendor"
      - restore_cache:
          key: go-commands-{{ .Environment.CACHE_VERSION }}-{{ checksum "Gopkg.lock" }}
      - run:
          name: "Install commands"
          command: |
            if [ ! -e "/go/bin/unused" ]; then
              make install-commands GO_GET="go get -u"
            fi
      - save_cache:
          key: go-commands-{{ .Environment.CACHE_VERSION }}-{{ checksum "Gopkg.lock" }}
          paths:
            - "/go/bin"
      - run:
          name: "Apply database migrations"
          command: |
            goose -env=circle_ci up
      - run:
          name: "Run go-lint"
          command: make go-lint
      - run:
          name: "Run go-test"
          command: |
            export MYSQL_USER=lekcije
            make go-test GO_TEST="go test -v -race -coverprofile=coverage.txt -covermode=atomic -p=1"
      - run:
          name: "Upload to codecov"
          command: |
            bash <(curl -s https://codecov.io/bash)
  deploy-frontend:
    working_directory: /go/src/github.com/oinume/lekcije
    docker:
      - image: node:10.12-stretch
        <<: *env
    steps:
      - checkout
      - run:
          <<: *gitconfig
      - run:
          name: "Install packages"
          command: |
            set -eu
            npm install
      - run:
          name: "Minify"
          command: |
            rm -rf static
            make minify-static
      - restore_cache:
          key: google-cloud-sdk-221.0.0
      - run:
          name: "Install google-cloud-sdk"
          command: |
            ./ci/install-google-cloud-sdk.sh
      - save_cache:
          key: google-cloud-sdk-221.0.0
          paths:
          - /google-cloud-sdk
      - run:
          name: "Activate GCP service account"
          command: |
            echo $GCP_SERVICE_ACCOUNT_KEY | base64 --decode > ./service-account-key.json
            gcloud auth activate-service-account --key-file ./service-account-key.json
      - run:
          name: "Deploy to GCS"
          command: |
            HASH=$(make print-version-hash)
            gsutil -m rsync -d -r static/$HASH gs://asset.lekcije.com/static/$HASH
      - run:
          name: "Ensure to enable CORS"
          command: |
            gsutil cors set cors-asset.lekcije.com.json gs://asset.lekcije.com
      - run:
          name: "Install heroku command"
          command: |
            ./ci/install-heroku-cli.sh
      - run:
          name: "Set VERSION_HASH on heroku"
          command: |
            HASH=$(make print-version-hash)
            heroku config:set VERSION_HASH=$HASH -a lekcije


# TODO: Run e2e-test

workflows:
  version: 2
  build-workflow:
    jobs:
      - server:
          filters:
            branches:
              only: /.*/
      - frontend:
          filters:
            branches:
              only: /.*/
      - deploy-frontend:
          requires:
            - frontend
          filters:
            branches:
              only:
                - master
                - /public-.*/
